--- origsrc/webkit-1.0.1/GNUmakefile.am	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/GNUmakefile.am	2008-07-10 01:04:11.375000000 -0500
@@ -79,6 +79,9 @@
 if OS_WIN32
 no_undefined = -no-undefined
 endif
+if OS_CYGWIN
+no_undefined = -no-undefined
+endif
 
 # Shared libraries
 lib_LTLIBRARIES = \
--- origsrc/webkit-1.0.1/JavaScriptCore/API/JSStringRef.cpp	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/JavaScriptCore/API/JSStringRef.cpp	2008-07-10 01:03:50.484375000 -0500
@@ -44,7 +44,7 @@
 JSStringRef JSStringCreateWithCharacters(const JSChar* chars, size_t numChars)
 {
     JSLock lock;
-    return toRef(UString(chars, static_cast<int>(numChars)).rep()->ref());
+    return toRef(UString(reinterpret_cast<const UChar*>(chars), static_cast<int>(numChars)).rep()->ref());
 }
 
 JSStringRef JSStringCreateWithUTF8CString(const char* string)
--- origsrc/webkit-1.0.1/JavaScriptCore/VM/CodeBlock.h	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/JavaScriptCore/VM/CodeBlock.h	2008-07-10 01:04:11.406250000 -0500
@@ -37,6 +37,10 @@
 #include <wtf/RefPtr.h>
 #include <wtf/Vector.h>
 
+#ifdef max
+#undef max
+#endif
+
 namespace KJS {
 
     class ExecState;
--- origsrc/webkit-1.0.1/JavaScriptCore/VM/CodeGenerator.h	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/JavaScriptCore/VM/CodeGenerator.h	2008-07-10 01:04:11.421875000 -0500
@@ -44,6 +44,10 @@
 #include <wtf/PassRefPtr.h>
 #include <wtf/Vector.h>
 
+#ifdef max
+#undef max
+#endif
+
 namespace KJS {
 
     class Identifier;
--- origsrc/webkit-1.0.1/JavaScriptCore/kjs/DateMath.cpp	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/JavaScriptCore/kjs/DateMath.cpp	2008-07-10 01:04:11.453125000 -0500
@@ -329,7 +329,7 @@
     // greater than the max year minus 27 (2010), we want to use the max year
     // minus 27 instead, to ensure there is a range of 28 years that all years
     // can map to.
-    return std::min(msToYear(getCurrentUTCTime()), maximumYearForDST() - 27) ;
+    return min(msToYear(getCurrentUTCTime()), maximumYearForDST() - 27) ;
 }
 
 /*
--- origsrc/webkit-1.0.1/JavaScriptCore/kjs/DateMath.h	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/JavaScriptCore/kjs/DateMath.h	2008-07-10 01:04:11.484375000 -0500
@@ -105,7 +105,7 @@
         , year(inTm.tm_year)
         , isDST(inTm.tm_isdst)
     {
-#if !PLATFORM(WIN_OS) && !PLATFORM(SOLARIS)
+#if !PLATFORM(WIN_OS) && !PLATFORM(SOLARIS) && !PLATFORM(CYGWIN)
         utcOffset = static_cast<int>(inTm.tm_gmtoff);
 
         int inZoneSize = strlen(inTm.tm_zone) + 1;
@@ -132,7 +132,7 @@
         ret.tm_year  =  year;
         ret.tm_isdst =  isDST;
 
-#if !PLATFORM(WIN_OS) && !PLATFORM(SOLARIS)
+#if !PLATFORM(WIN_OS) && !PLATFORM(SOLARIS) && !PLATFORM(CYGWIN)
         ret.tm_gmtoff = static_cast<long>(utcOffset);
         ret.tm_zone = timeZone;
 #endif
--- origsrc/webkit-1.0.1/JavaScriptCore/kjs/collector.cpp	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/JavaScriptCore/kjs/collector.cpp	2008-07-10 01:04:11.531250000 -0500
@@ -47,7 +47,7 @@
 
 #include "CollectorHeapIntrospector.h"
 
-#elif PLATFORM(WIN_OS)
+#elif PLATFORM(WIN_OS) || PLATFORM(CYGWIN)
 
 #include <windows.h>
 
@@ -95,7 +95,7 @@
 #if PLATFORM(DARWIN)    
     vm_address_t address = 0;
     vm_map(current_task(), &address, BLOCK_SIZE, BLOCK_OFFSET_MASK, VM_FLAGS_ANYWHERE, MEMORY_OBJECT_NULL, 0, FALSE, VM_PROT_DEFAULT, VM_PROT_DEFAULT, VM_INHERIT_DEFAULT);
-#elif PLATFORM(WIN_OS)
+#elif PLATFORM(WIN_OS) || PLATFORM(CYGWIN)
      // windows virtual address granularity is naturally 64k
     LPVOID address = VirtualAlloc(NULL, BLOCK_SIZE, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
 #elif HAVE(POSIX_MEMALIGN)
@@ -133,7 +133,7 @@
 {
 #if PLATFORM(DARWIN)    
     vm_deallocate(current_task(), reinterpret_cast<vm_address_t>(block), BLOCK_SIZE);
-#elif PLATFORM(WIN_OS)
+#elif (PLATFORM(WIN_OS) || PLATFORM(CYGWIN))
     VirtualFree(block, BLOCK_SIZE, MEM_RELEASE);
 #elif HAVE(POSIX_MEMALIGN)
     free(block);
@@ -319,7 +319,7 @@
 #elif PLATFORM(WIN_OS) && PLATFORM(X86_64) && COMPILER(MSVC)
     PNT_TIB64 pTib = reinterpret_cast<PNT_TIB64>(NtCurrentTeb());
     return (void*)pTib->StackBase;
-#elif PLATFORM(WIN_OS) && PLATFORM(X86) && COMPILER(GCC)
+#elif (PLATFORM(WIN_OS) || PLATFORM(CYGWIN)) && PLATFORM(X86) && COMPILER(GCC)
     // offset 0x18 from the FS segment register gives a pointer to
     // the thread information block for the current thread
     NT_TIB* pTib;
--- origsrc/webkit-1.0.1/JavaScriptCore/wtf/Platform.h	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/JavaScriptCore/wtf/Platform.h	2008-07-10 01:04:11.562500000 -0500
@@ -50,6 +50,13 @@
 #define WTF_PLATFORM_WIN_OS 1
 #endif
 
+/* PLATFORM(CYGWIN) */
+/* Operating system level dependencies for Cygwin that should be used */
+/* regardless of operating environment */
+#if defined(__CYGWIN__)
+#define WTF_PLATFORM_CYGWIN 1
+#endif
+
 /* PLATFORM(FREEBSD) */
 /* Operating system level dependencies for FreeBSD-like systems that */
 /* should be used regardless of operating environment */
@@ -69,6 +76,7 @@
 /* should be used regardless of operating environment */
 #if   PLATFORM(DARWIN)     \
    || PLATFORM(FREEBSD)    \
+   || PLATFORM(CYGWIN)     \
    || defined(unix)        \
    || defined(__unix)      \
    || defined(__unix__)    \
--- origsrc/webkit-1.0.1/WebCore/bridge/c/c_instance.cpp	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/WebCore/bridge/c/c_instance.cpp	2008-07-10 01:04:11.593750000 -0500
@@ -174,7 +174,7 @@
         !_object->_class->enumerate)
         return;
 
-    unsigned count;
+    uint32_t count;
     NPIdentifier* identifiers;
     
     {
--- origsrc/webkit-1.0.1/WebCore/dom/Entity.h	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/WebCore/dom/Entity.h	2008-07-10 01:04:11.625000000 -0500
@@ -30,6 +30,7 @@
 // can continue to be compiled.
 class Entity : public ContainerNode {
 public:
+    Entity(Document* d) : ContainerNode(d) {}
     String publicId() const { ASSERT_NOT_REACHED(); return String(); }
     String systemId() const { ASSERT_NOT_REACHED(); return String(); }
     String notationName() const { ASSERT_NOT_REACHED(); return String(); }
--- origsrc/webkit-1.0.1/WebCore/page/InspectorController.cpp	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/WebCore/page/InspectorController.cpp	2008-07-10 01:04:11.671875000 -0500
@@ -93,12 +93,12 @@
 
 static JSRetainPtr<JSStringRef> jsStringRef(const SourceProvider& str)
 {
-    return JSRetainPtr<JSStringRef>(Adopt, JSStringCreateWithCharacters(str.data(), str.length()));
+    return JSRetainPtr<JSStringRef>(Adopt, JSStringCreateWithCharacters(reinterpret_cast<const JSChar*>(str.data()), str.length()));
 }
 
 static JSRetainPtr<JSStringRef> jsStringRef(const String& str)
 {
-    return JSRetainPtr<JSStringRef>(Adopt, JSStringCreateWithCharacters(str.characters(), str.length()));
+    return JSRetainPtr<JSStringRef>(Adopt, JSStringCreateWithCharacters(reinterpret_cast<const JSChar*>(str.characters()), str.length()));
 }
 
 static JSRetainPtr<JSStringRef> jsStringRef(const UString& str)
@@ -115,7 +115,7 @@
     JSRetainPtr<JSStringRef> scriptString(Adopt, JSValueToStringCopy(context, value, exception));
     if (exception && *exception)
         return String();
-    return String(JSStringGetCharactersPtr(scriptString.get()), JSStringGetLength(scriptString.get()));
+    return String(reinterpret_cast<const UChar*>(JSStringGetCharactersPtr(scriptString.get())), JSStringGetLength(scriptString.get()));
 }
 
 #define HANDLE_EXCEPTION(context, exception) handleException((context), (exception), __LINE__)
--- origsrc/webkit-1.0.1/WebCore/page/JavaScriptProfileNode.cpp	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/WebCore/page/JavaScriptProfileNode.cpp	2008-07-10 01:04:11.703125000 -0500
@@ -55,7 +55,7 @@
         return JSValueMakeUndefined(ctx);
 
     ProfileNode* profileNode = static_cast<ProfileNode*>(JSObjectGetPrivate(thisObject));
-    JSRetainPtr<JSStringRef> functionNameString(Adopt, JSStringCreateWithCharacters(profileNode->functionName().data(), profileNode->functionName().size()));
+    JSRetainPtr<JSStringRef> functionNameString(Adopt, JSStringCreateWithCharacters(reinterpret_cast<const JSChar*>(profileNode->functionName().data()), profileNode->functionName().size()));
     return JSValueMakeString(ctx, functionNameString.get());
 }
 
@@ -65,7 +65,7 @@
         return JSValueMakeUndefined(ctx);
 
     ProfileNode* profileNode = static_cast<ProfileNode*>(JSObjectGetPrivate(thisObject));
-    JSRetainPtr<JSStringRef> urlString(Adopt, JSStringCreateWithCharacters(profileNode->url().data(), profileNode->url().size()));
+    JSRetainPtr<JSStringRef> urlString(Adopt, JSStringCreateWithCharacters(reinterpret_cast<const JSChar*>(profileNode->url().data()), profileNode->url().size()));
     return JSValueMakeString(ctx, urlString.get());
 }
 
--- origsrc/webkit-1.0.1/WebCore/platform/graphics/GlyphPageTreeNode.cpp	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/WebCore/platform/graphics/GlyphPageTreeNode.cpp	2008-07-10 01:04:11.750000000 -0500
@@ -199,8 +199,8 @@
                 bool zeroFilled = false;
                 for (unsigned i = 0; i < numRanges; i++) {
                     const FontDataRange& range = segmentedFontData->rangeAt(i);
-                    int from = max(0, range.from() - static_cast<int>(start));
-                    int to = 1 + min(range.to() - static_cast<int>(start), static_cast<int>(GlyphPage::size) - 1);
+                    int from = max(0, static_cast<int>(range.from() - start));
+                    int to = 1 + min(static_cast<int>(range.to() - start), static_cast<int>(GlyphPage::size) - 1);
                     if (from < static_cast<int>(GlyphPage::size) && to > 0) {
                         if (!zeroFilled) {
                             if (from > 0 || to < static_cast<int>(GlyphPage::size)) {
--- origsrc/webkit-1.0.1/WebCore/plugins/npfunctions.h	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/WebCore/plugins/npfunctions.h	2008-07-10 01:04:11.812500000 -0500
@@ -79,8 +79,8 @@
 typedef NPObject* (*NPN_CreateObjectProcPtr) (NPP, NPClass *aClass);
 typedef NPObject* (*NPN_RetainObjectProcPtr) (NPObject *obj);
 typedef void (*NPN_ReleaseObjectProcPtr) (NPObject *obj);
-typedef bool (*NPN_InvokeProcPtr) (NPP npp, NPObject *obj, NPIdentifier methodName, const NPVariant *args, unsigned argCount, NPVariant *result);
-typedef bool (*NPN_InvokeDefaultProcPtr) (NPP npp, NPObject *obj, const NPVariant *args, unsigned argCount, NPVariant *result);
+typedef bool (*NPN_InvokeProcPtr) (NPP npp, NPObject *obj, NPIdentifier methodName, const NPVariant *args, uint32_t argCount, NPVariant *result);
+typedef bool (*NPN_InvokeDefaultProcPtr) (NPP npp, NPObject *obj, const NPVariant *args, uint32_t argCount, NPVariant *result);
 typedef bool (*NPN_EvaluateProcPtr) (NPP npp, NPObject *obj, NPString *script, NPVariant *result);
 typedef bool (*NPN_GetPropertyProcPtr) (NPP npp, NPObject *obj, NPIdentifier  propertyName, NPVariant *result);
 typedef bool (*NPN_SetPropertyProcPtr) (NPP npp, NPObject *obj, NPIdentifier  propertyName, const NPVariant *value);
--- origsrc/webkit-1.0.1/WebKitTools/DumpRenderTree/DumpRenderTree.h	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/WebKitTools/DumpRenderTree/DumpRenderTree.h	2008-07-10 01:04:11.859375000 -0500
@@ -46,6 +46,10 @@
 
 #include <string>
 
+#ifndef _GLIBCXX_USE_WCHAR_T
+#define wstring string
+#endif
+
 std::wstring urlSuitableForTestResult(const std::wstring& url);
 
 class LayoutTestController;
--- origsrc/webkit-1.0.1/autogen.sh	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/autogen.sh	2008-07-10 01:04:11.906250000 -0500
@@ -54,4 +54,6 @@
 
 cd $ORIGDIR || exit 1
 
+if test -z "$NOCONFIGURE" ; then
 $srcdir/configure $AUTOGEN_CONFIGURE_ARGS "$@" || exit $?
+fi
--- origsrc/webkit-1.0.1/configure.ac	2008-06-15 18:40:06.000000000 -0500
+++ src/webkit-1.0.1/configure.ac	2008-07-10 01:04:11.953125000 -0500
@@ -49,6 +49,9 @@
      *-*-darwin*)
        os_darwin=yes
        ;;
+     *-*-cygwin*)
+       os_cygwin=yes
+       ;;
 esac
 
 # If CXXFLAGS and CFLAGS are unset, default to empty.
@@ -524,6 +527,7 @@
 AM_CONDITIONAL([OS_UNIX],[test "$os_win32" = "no"])
 AM_CONDITIONAL([OS_LINUX],[test "$os_linux" = "yes"])
 AM_CONDITIONAL([OS_FREEBSD],[test "$os_freebsd" = "yes"])
+AM_CONDITIONAL([OS_CYGWIN],[test "$os_cygwin" = "yes"])
 
 # target conditionals
 AM_CONDITIONAL([TARGET_X11], [test "$with_target" = "x11"])
